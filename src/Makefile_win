# ! Copyright 2017- LabTerra

# !     This program is free software: you can redistribute it and/or modify
# !     it under the terms of the GNU General Public License as published by
# !     the Free Software Foundation, either version 3 of the License, or
# !     (at your option) any later version.)

# !     This program is distributed in the hope that it will be useful,
# !     but WITHOUT ANY WARRANTY; without even the implied warranty of
# !     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# !     GNU General Public License for more details.

# !     You should have received a copy of the GNU General Public License
# !     along with this program.  If not, see <http://www.gnu.org/licenses/>.

# ! AUTHOR: JP Darela

# Makefile for Windows to be used with nmake + MSVC + ifx (Intel Fortran Compiler) + f2py 
# In windows, only python <= 3.11 is supported due to distutils backend that was excluded in python 3.12.

# Variables
# Python executable, package manager and f2py
PYEXEC = python 
PIP = $(PYEXEC) -m pip
F2PY = $(PYEXEC) -m numpy.f2py
CYTHON = $(PYEXEC) -m cython
DEBUG_PROGRAM = run_debug

# Python extension module name. This is the name of the module that will be created by f2py
MODNAME = caete_module

# Fortran interfaces automatically generated by f2py
INTERFACES = $(MODNAME).pyf

# Directory where the Fortran modules are located, in general this is needed only by the editor (linting, etc. by fortls)
MOD_DIR = ./

# Compiler
# Compiler to be used by f2py, in this case ifx (Intel Fortran Compiler) from the intel_oneapi package
# To use gnu-gfortran (in Linux and macOS), use the Makefile provided in the src folder.
FC = ifx

# Flags
# f2py flags
MFLAG = -m
HFLAG = -h
CFLAG = -c
OVRTFLAG = --overwrite-signature

# Intel Fortran Compiler (ifx) FLAGS for debugging (do not affect the extension module)
FCFLAGS = -fpp -Od -debug:full -warn:all -nologo
FLFLAGS = -fpp -c -Od -debug:full -nologo

# Use budget_fixed.F90 for stack allocation (faster)
MAIN_SUB = budget_fixed.F90

# Use budget.F90 for heap allocation (slower, but allows larger number of PLS)
# MAIN_SUB = budget.F90

# Intel Fortran Compiler (ifx) FLAGS for release (caete_module extension module)
IFX_FLAGS = /fpp /QxHost /warn:all /nologo /I$(MOD_DIR) /DPREPEND_FORTRAN /DNO_APPEND_FORTRAN /DUPPERCASE_FORTRAN /DUNDERSCORE_G77

# Sources
src_lib = types.f90 global.f90 photo_par.f90 funcs.f90 evap.f90 soil_dec.f90 cc.f90 allocation.f90 productivity.f90
sources = $(src_lib) $(MAIN_SUB)

# Fortran objects
src_obj = types.obj photo_par.obj global.obj funcs.obj evap.obj soil_dec.obj cc.obj allocation.obj productivity.obj
objects = $(src_obj) $(basename $(MAIN_SUB)).obj

all: caete_lib

# Targets
caete_lib: clean_py clean_so modules so_parallel

# python setup
setup:
	@echo "Installing dependencies..."
	$(PIP) install -r requirements_3xx_last.txt

# pyf interfaces
interface: $(sources)
	@echo "Creating Fortran interfaces for the caete_module using f2py..."
	@$(PYEXEC) precompilation_data.py
	@$(F2PY) $(HFLAG) $(INTERFACES) $(sources) $(MFLAG) $(MODNAME) $(OVRTFLAG) --quiet

# In windows we force the use of the deprecated distutils backend. Meson backend does not work with ifx compiler.
# Serial version of the extension module. Without OpenMP
so: $(sources) interface
	@$(F2PY) $(INTERFACES) -c $(sources) --backend distutils --f90exec="$(FC)" --f90flags="$(IFX_FLAGS)"
	@echo "Serial version of caete_module created using $(FC)"
	@echo Bundle dlls from Intel Fortran Compiler and MSVC into the module directory
	@$(PYEXEC) runtime_dlls.py
# 	$(PYEXEC) setup.py build_ext --inplace --verbose


# Parallel version of the extension module. With OpenMP
so_parallel: $(sources) interface
	$(F2PY) $(INTERFACES) -c $(sources) --backend distutils --f90exec="$(FC)" --f90flags="$(IFX_FLAGS) /Qopenmp"
	@echo "Parallel version of caete_module created using $(FC)"
	@$(PYEXEC) runtime_dlls.py
#	$(PYEXEC) setup.py build_ext --inplace --verbose

modules: $(sources)
	$(FC) -fpp -c -O3 $(sources)

debug: $(objects)
	$(PYEXEC) create_plsbin.py
	$(FC) -o $(DEBUG_PROGRAM) $(FCFLAGS) $(objects) debug_caete.f90

global.obj: global.f90
	$(FC) $(FLFLAGS) global.f90

types.obj: types.f90
	$(FC) $(FLFLAGS) types.f90

types.mod: types.obj types.f90
	$(FC) $(FLFLAGS) types.f90

photo_par.obj: photo_par.f90
	$(FC) $(FLFLAGS) photo_par.f90

global_par.mod: global.obj global.f90
	$(FC) $(FLFLAGS) global.f90

photo_par.mod: photo_par.obj photo_par.f90
	$(FC) $(FLFLAGS) photo_par.f90

funcs.obj: funcs.f90
	$(FC) $(FLFLAGS) funcs.f90

photo.mod: funcs.obj funcs.f90
	$(FC) $(FLFLAGS) funcs.f90

evap.obj: evap.f90
	$(FC) $(FLFLAGS) evap.f90

water.mod: evap.obj evap.f90
	$(FC) $(FLFLAGS) evap.f90

soil_dec.obj: soil_dec.f90
	$(FC) $(FLFLAGS) soil_dec.f90

soil_dec.mod: soil_dec.obj soil_dec.f90
	$(FC) $(FLFLAGS) soil_dec.f90

cc.obj: cc.f90
	$(FC) $(FLFLAGS) cc.f90

carbon_costs.mod: cc.obj cc.f90
	$(FC) $(FLFLAGS) cc.f90

allocation.obj: allocation.f90
	$(FC) $(FLFLAGS) allocation.f90

alloc.mod: allocation.obj allocation.f90
	$(FC) $(FLFLAGS) allocation.f90

productivity.obj: productivity.f90
	$(FC) $(FLFLAGS) productivity.f90

productivity.mod: productivity.obj productivity.f90
	$(FC) $(FLFLAGS) productivity.f90

budget.obj: budget.F90
	$(FC) $(FLFLAGS) budget.F90

budget.mod: budget.obj budget.F90
	$(FC) $(FLFLAGS) budget.F90

clean_py:
	del /s /q __pycache__
	del /s /q build

clean_so:
	del /s *.pyd
	del /s *.pyf
	del /s *.c
	del /s *.log
	del /s *.psz

clean: clean_py clean_so
	del /s *.mod
	del /s *.o
	del /s *.s
	del pls_ex.txt
	del run_debug
	del logfile.log
	del /s *.obj
	del /s *.exe
	del /s *.dll
	del /s *.pdb
	del /s *.ilk
	del /s *.lib
	del /s *.exp
	cls

clean_outputs:
	del /s /q ..\outputs
	cls

clean_all: clean clean_outputs
	@echo "All files cleaned."
